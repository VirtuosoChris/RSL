/// Hello World RSL program.  Just draw some triangles!

module Renderer
{
	struct Vertex
	{
		float[3] position;
		float[3] color;
	};

	struct Pixel
	{
		uint8[3] col;
	};

	// the image2D can be created in the C++ program with the window dimensions, then passed in.
	func HelloRSL (Image2D<Pixel> renderTargetIn) ->(Image2D<Pixel> renderTargetOut)
	{
		// "pure" constness doesn't map directly to actual graphics practice.  see here, our framebuffer.
		// this is what the "persistent" thing was earlier.
		// would require runtime check comparing input and output arguments...
		// tabled for now

		//create a render target cleared to blue
		Image2D<Pixel> clearTarget = renderTargetIn.clear({0, 0, 0xff});

		Vertex vertices[3] = {
			{
				{-1.0, -1.0, 0.0},		//this works because C++ style struct coersion to array args.
				{1.0, 0.0, 0.0}
			},

			{
				{1.0, -1.0, 0.0},
				{0.0, 1.0, 0.0}
			},

			{
				{1.0, 1.0, 0.0},
				{0.0, 0.0, 1.0}
			}
		};

		//  First argument, compiletime, maps to gl_Position imho, regardless of name
		func HelloVS(index idx) -> (float[4] POSITION, float[3] col) // My preference is that the first output argument positionally maps to gl_Position, compile error if it can't be mapped
		{
			//Imho vertices is pulled in via scoping, yeah.  First class functions.

			POSITION = {vertices[idx].position, 1.0};
			col = vertices[idx].color;
		};

		//compile time validation (if possible) that the input arguments to the fs match the arguments output from the vs, yes.
		//FS output needs to match image pixel type
		func helloFS(vec3 col)-> (Pixel RT)
		{
			RT.col = col;
		}

		rasterize(
			renderTarget = clearTarget, // sugar for readTarget = RT, writeTarget = RT,
			viewport = clearTarget.rect(), // should just autocomplete to this if not specified...not autocomplete, but default argument
			mode = TRIANGLES,
			count = length(vertices)		//if HelloVS is just a single index in, then count alone.  If HelloVS needs other args (compiletime) then rasterize requires other args.
			cullFace = BACK
			vs = helloVS,
			fs = helloFS,
			depth = null //another default.
		) -> renderTargetOut;
	};

	export HelloRSL;
	export Pixel;
	export renderTarget;
};

export Renderer;
