/// Hello World RSL program.  Just draw some triangles!

struct Renderer
{
	Vertex = struct
	{
		float3 position;
		float3 color;
	};

	Pixel = struct
	{
		rgb8 col;
	};

	// the image2D can be created in the C++ program with the window dimensions, then passed in.
	HelloRSL = func (Image2D<Pixel> renderTargetIn) ->[Image2D<Pixel> renderTargetOut]
	{
		//create a render target cleared to blue
		Image2D<Pixel> clearTarget = renderTargetIn.clear(rgb8(0, 0, 0xff));

		Vertex vertices[3] = {
			{
				vec3(-1.0, -1.0, 0.0),
				vec3(1.0, 0.0, 0.0)
			},

			{
				vec3(1.0, -1.0, 0.0),
				vec3(0.0, 1.0, 0.0)
			},

			{
				vec3(1.0, 1.0, 0.0),
				vec3(0.0, 0.0, 1.0)
			}
		};

		// how does this work?  run time or compile time validation that the first argument returned by a vs function
		// is a vec4 named POSITION?
		helloVS = func (Index idx) -> [vec4 POSITION, vec3 col] // position is gl_Position, not a varying output.  built in?
		{
			// is scoping like python?  where vertices is automatically visible here? it's not an argument.

			POSITION = vec4(vertices[idx].position, 1.0);
			col = vertices[idx].color;
		};

		//run time or compile time validation that the input arguments to the fs match the arguments output from the vs?
		//or more generally arguments from previous stage match arguments into next stage.
		//even gl doesn't have that kind of coercion...
		//and how would that allow TransFeedback?
		helloFS = func(vec3 col)-> [Image2D<Pixel> RT]
		{
			RT.col = col;
		}

		rasterize(
			renderTarget = clearTarget, // sugar for readTarget = RT, writeTarget = RT,
			viewport = clearTarget.rect(), // should just autocomplete to this if not specified
			mode = TRIANGLES,
			vertices = vertices.size(), // vs is the only one that should be mandatory I think.
			cullFace = BACK
			vs = helloVS,
			fs = helloFS,
			depth = null //another default.
		) -> RenderTargetOut; // should be able to set return argument to null to turn off back end of pipeline

	};

	export HelloRSL;
	export Pixel;
	export renderTarget;

};

export Renderer;
