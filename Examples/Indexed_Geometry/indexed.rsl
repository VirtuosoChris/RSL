/// Hello World RSL program, modified to pass two RSL buffer objects in to the render function.
/// The actual vertex shader changes very little; there's an indirect lookup using the value pulled from the index buffer
/// The fact that the vertices are passed in from the program rather than hard coded in a constant buffer makes no difference,
/// other than having to export the Vertex struct so it's visible to the C++ code.
/// This code assumes that the buffers passed in contain a single model to be rendered in a single draw call.
/// There's no "binding" of vertex or index buffers.  None of that has any special semantics.  Buffers are buffers to RSL.
/// The optimizing compiler may or may not generate API calls based on the type or contents of the buffer,
/// but the programmer doesn't have to worry about it.
module Renderer
{
	struct Vertex
	{
		float[3] position;
		float[3] color;
	};

	struct Pixel
	{
		uint8[3] col;
	};

	// the image2D can be created in the C++ program with the window dimensions, then passed in.
	func HelloRSL (Image2D<Pixel> renderTargetIn
					Buffer <unsigned int> indices,
					Buffer <Vertex> vertices,
					) ->(Image2D<Pixel> renderTargetOut)
	{
		//create a render target cleared to blue
		Image2D<Pixel> clearTarget = renderTargetIn.clear({0, 0, 0xff});

		//  First argument, compiletime, maps to gl_Position imho, regardless of name
		func HelloVS(index idx) -> (float[4] POSITION, float[3] col) // My preference is that the first output argument positionally maps to gl_Position, compile error if it can't be mapped
		{
			//Imho vertices is pulled in via scoping, yeah.  First class functions.

			POSITION = {vertices[indices[idx]].position, 1.0};
			col = vertices[idx].color;
		};

		//compile time validation (if possible) that the input arguments to the fs match the arguments output from the vs, yes.
		//FS output needs to match image pixel type
		func helloFS(vec3 col)-> (Pixel RT)
		{
			RT.col = col;
		}

		rasterize(
			renderTarget = clearTarget, // sugar for readTarget = RT, writeTarget = RT,
			viewport = clearTarget.rect(), // should just autocomplete to this if not specified...not autocomplete, but default argument
			mode = TRIANGLES,
			count = length(indices)		//if HelloVS is just a single index in, then count alone.  If HelloVS needs other args (compiletime) then rasterize requires other args.
			cullFace = BACK
			vs = helloVS,
			fs = helloFS,
			depth = null //another default.
		) -> renderTargetOut;
	};

	export HelloRSL;
	export Pixel;
	export renderTarget;
	export Vertex;
};

export Renderer;
