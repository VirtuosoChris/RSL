/// Simple texture example
/// Adapted from https://github.com/openglsuperbible/sb6code/blob/master/src/simpletexture/simpletexture.cpp

module Renderer
{
	struct Vertex
	{
		float[4] position;
	};

	struct Pixel
	{
		uint8[3] col;
	};

	func createTexture() -> (Image2D<float32[4]> rval)
	{
		///note that mipmaps is now an optional argument to an image constructor
		rval = Image2D<float32[4]>(256,256, mipmaps = 8);

		for (uv : size(rval))
		{
			rval[uv] =
			{
				float((uv.x & uv.y) & 0xFF) / 255.0f,
	  			float((uv.x | uv.y) & 0xFF) / 255.0f,
	  			float((uv.x ^ uv.y) & 0xFF) / 255.0f,
	  			1.0f
			};
		}
	}

	func HelloRSL (Image2D<Pixel> renderTargetIn) ->(Image2D<Pixel> renderTargetOut)
	{
		//create a render target cleared to blue
		Image2D<Pixel> clearTarget = renderTargetIn.clear({0.0f, 0.25f, 0.0f, 1.0f});

		Image2D<float32[4]> textureMap = createTexture();

		Vertex vertices[3] = {
			{{ 0.75, -0.75, 0.5, 1.0}},
			{{-0.75, -0.75, 0.5, 1.0}},
			{{0.75,  0.75, 0.5, 1.0)}}
		};

		//  First argument, compiletime, maps to gl_Position imho, regardless of name
		func HelloVS(index idx) -> (float[4] POSITION) // My preference is that the first output argument positionally maps to gl_Position, compile error if it can't be mapped
		{
			POSITION = vertices[idx].position;
		};

		//compile time validation (if possible) that the input arguments to the fs match the arguments output from the vs, yes.
		//FS output needs to match image pixel type
		func helloFS()-> (Pixel RT)
		{
			//// creating the convention that things like gl_FragDepth, gl_FragCoord, are assumed to be visible in fs scope, with underscore naming convention
			/// also creating a matlab style array selection syntax
			float[2] coords = _FragCoord[0:2] / size (textureMap);

			/// what do we do about float -> byte conversions ? assume the same sort of byte is normalized float assumption glsl does ?
			RT.col = textureMap(coords, filter=BILINEAR)[0:3]; /// take rgb only
		}

		rasterize(
			renderTarget = clearTarget, // sugar for readTarget = RT, writeTarget = RT,
			viewport = clearTarget.rect(), // should just autocomplete to this if not specified...not autocomplete, but default argument
			mode = TRIANGLES,
			count = length(vertices)		//if HelloVS is just a single index in, then count alone.  If HelloVS needs other args (compiletime) then rasterize requires other args.
			cullFace = BACK
			vs = helloVS,
			fs = helloFS,
			depth = null //another default.
		) -> renderTargetOut;
	};

	export HelloRSL;
	export Pixel;
};

export Renderer;
