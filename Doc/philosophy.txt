What is RSL ?
 - Renderer Shading Language
 - A programming language, which is a high level abstraction of graphics operations.
 - You use it to program an entire rendering engine in terms of high level operations,
 such as rendering passes.
 -There is a compiler which compiles RSL to C++ functions or python code
 -The goal is to have a many code generators

Philosophy:
-Programmers should as often as possible not have to worry about the underlying details of the code generated or the graphics API.  This is favored over expressiveness.  For example, the separation of concepts between vertex arrays and buffer objects in OpenGL should not be part of the language.
-The language should as much as possible be stateless.  depthFunc(ENABLE), etc type operations should be avoided in favor of optional arguments
-The language should enable that the code generated by the compiler can be sensible and efficient graphics code as if it were hand written.
-RSL is meant to be used as a library generator rather than an application generator.  It's meant to make entrypoints to draw a single frame from an application.  As a result, any kind of system framebuffers, timing loops, input, etc are second class citizens at best.  There may be auxiliary libraries in c++ to generate RSL images from screen framebuffers, etc. added later on to facilitate this kind of work, but RSL itself should know nothing about the system it is generating code for.
-Assume no particular engine-specific data layout, vertex attributes, rendering algorithms.  Support these through standard libraries only, but make them as versatile as possible (example, function pointer subroutines)
-Graphics programming language, not GPU programming language.  Low level memory management and parallelism should be entirely handled by the compiler generated engine runtime.

Benefits:
-Extracting Parallelism
-Code portability.
